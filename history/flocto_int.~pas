unit flocto_int;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, StdCtrls, ExtCtrls, Models, ExtDlgs, Spin, AdvOption, SmallTools,
  ComCtrls;

  var   modelIndex:integer=4;
  var   pipSize:integer=200;


  var RefreshRate:word=10;

  var   clTable:array[-4..3] of  TColor=(clBlack,clFuchsia,clGreen,clLime,clYellow, clRed, clNavy,clTeal );
  {var   clTable:array[0..3] of  TColor=(clGray,clRed,clBlue,clGreen);}
type
  TForm1 = class(TForm)
    EditForRate: TEdit;
    pip: TImage;
    OK: TButton;
    LabelRate: TLabel;
    ComboBoxModel: TComboBox;
    Label2: TLabel;
    EditModelIndex: TEdit;
    EditFluctuation: TEdit;
    LabelFluct: TLabel;
    EditSigma: TEdit;
    LabelSigma: TLabel;
    EditConcentration: TEdit;
    Label3: TLabel;
    EditMutConcentration: TEdit;
    Label4: TLabel;
    ButtonFittnes: TButton;
    ButtonESS: TButton;
    Label5: TLabel;
    Label6: TLabel;
    EditXdef: TEdit;
    EditYdef: TEdit;
    ButtonYvSigma: TButton;
    ButtonYvFluct: TButton;
    EditIterations: TEdit;
    Label7: TLabel;
    ButtonYvR: TButton;
    ButtonAdvanced: TButton;
    ButtonBranchFitt: TButton;
    MyProgressBar: TProgressBar;
    Label1: TLabel;
    LabelRefRat: TLabel;
    EditPipSize: TEdit;
    CheckBoxClean: TCheckBox;
    ButtonSavePip: TButton;
    CheckBoxAutoSave: TCheckBox;
    SpinEditRefRate: TSpinEdit;
    SavePipPictureDialog: TSavePictureDialog;
    procedure OKClick(Sender: TObject);
    procedure EditForRateChange(Sender: TObject);
    procedure EditPipSizeChange(Sender: TObject);
    procedure ComboBoxModelChange(Sender: TObject);
    procedure EditModelIndexChange(Sender: TObject);
    procedure EditSigmaChange(Sender: TObject);
    procedure EditConcentrationChange(Sender: TObject);
    procedure EditMutConcentrationChange(Sender: TObject);
    procedure EditFluctuationChange(Sender: TObject);
    procedure ButtonSavePipClick(Sender: TObject);
    procedure ButtonESSClick(Sender: TObject);
    procedure SpinEditRefRateChange(Sender: TObject);
    procedure EditXdefChange(Sender: TObject);
    procedure EditYdefChange(Sender: TObject);
    procedure ButtonYvSigmaClick(Sender: TObject);
    procedure ButtonYvFluctClick(Sender: TObject);
    { Public declarations }
    procedure PrintOnPip(var TheModel:AnyModel;stx,sty,size:integer);
    procedure PrintBranchingOnPip(var TheModel:AnyModel;stx,sty,size:integer);
    procedure PrintYvSigmaOnPip(var TheModel:AnyModel;stx,sty,size:integer);
    procedure PrintYvFluctOnPip(var TheModel:AnyModel;stx,sty,size:integer);
    procedure PrintYvROnPip(var TheModel:AnyModel;stx,sty,size:integer);
    procedure FittBranchingOnPip(stx,sty,size:integer);
    procedure EditIterationsChange(Sender: TObject);
    procedure ButtonYvRClick(Sender: TObject);
    procedure ButtonAdvancedClick(Sender: TObject);
    procedure ButtonBranchFittClick(Sender: TObject);
  end;

var
  Form1: TForm1;

  TheModel1:model1;
  TheModel2:model2;
  TheModel3:model3;
  TheModel4:model4;
  CurrentModel:^AnyModel=nil;

implementation

{$R *.dfm}

procedure TForm1.ButtonAdvancedClick(Sender: TObject);
begin
   AdvOption.Form2.Show;
end;

procedure TForm1.ButtonSavePipClick(Sender: TObject);
var MyName:string;
begin
if CurrentModel=nil then exit;
MyName:=Int2str(pipSize,0)+CurrentModel^.TentativeBmpFileName;
SavePipPictureDialog.FileName:=MyName;
if SavePipPictureDialog.Execute then
        begin
        MyName:=SavePipPictureDialog.FileName;
        pip.Picture.SaveToFile(MyName);
        end;
end;

procedure TForm1.PrintOnPip(var TheModel:AnyModel;stx,sty,Size:integer);
var     xstep,ystep,x,y:double;
        a,b:integer;
const   title= 'X versus Y plot' ;
begin
a:=1;b:=1;   BorderedTextOut(pip.Canvas,a,b,3,3,title);
a:=a+2;b:=1; BorderedTextOut(pip.Canvas,a,b,3,3,TheModel.title);
pip.Canvas.Pen.Color:=clMaroon;
DrawGraphConstrains(pip.Canvas,stx-1,sty+size+1,-20,double2str(MinY,FlpLenght,FlpPrec),double2str(MinX,FlpLenght,FlpPrec)); {0,0}
DrawGraphConstrains(pip.Canvas,stx+size+1,sty-1,20,double2str(MaxY,FlpLenght,FlpPrec),double2str(MaxX,FlpLenght,FlpPrec));  {Max,Max}
pip.Canvas.Pen.Color:=clBlack;
xstep:=abs(MaxX-MinX)/(Size);
ystep:=abs(MaxY-MinY)/(Size);

x:=MinX;
a:=stx;
while x<=MaxX do
        begin
        y:=MinY;
        b:=sty+Size-1;

        while y<=MaxY do
                begin
                if TheModel.IsInvasion(x,y) then
                        begin
                        if TheModel.WasSpecial<>0 then
                                pip.Canvas.Pixels[a,b]:=clTable[TheModel.WasSpecial]
                                else
                                pip.Canvas.Pixels[a,b]:=clBlack
                        end
                        else
                        begin
                        if TheModel.WasSpecial<>0 then
                                pip.Canvas.Pixels[a,b]:=clTable[TheModel.WasSpecial]
                                else
                                pip.Canvas.Pixels[a,b]:=clYellow;
                        end;
                dec(b);
                y:=y+ystep;
                end;

        MyProgressBar.Position:=round( (100*(a-stx))/size );
        inc(a);
        x:=x+xstep;

        if a mod RefreshRate = 0 then begin  Application.ProcessMessages; end;
        end;
end;

procedure TForm1.PrintYvSigmaOnPip(var TheModel:AnyModel;stx,sty,size:integer);
var     ystep,y:double;
        sstep,sig:double;
        a,b:integer;
const   title= 'Sigma versus Y plot' ;
begin
a:=1;b:=1;   BorderedTextOut(pip.Canvas,a,b,3,3,title);
a:=a+2;b:=1; BorderedTextOut(pip.Canvas,a,b,3,3,TheModel.title);
pip.Canvas.Pen.Color:=clMaroon;
DrawGraphConstrains(pip.Canvas,stx-1,sty+size+1,-20,double2str(MinY,FlpLenght,FlpPrec),double2str(MinSigma,FlpLenght,FlpPrec)); {0,0}
DrawGraphConstrains(pip.Canvas,stx+size+1,sty-1,20,double2str(MaxY,FlpLenght,FlpPrec),double2str(MaxSigma,FlpLenght,FlpPrec));  {Max,Max}
pip.Canvas.Pen.Color:=clBlack;
ystep:=abs(MaxY-MinY)/(Size);
sstep:=abs(MaxSigma-MinSigma)/(Size);
sig:=MinSigma;
a:=stx;
while sig<=MaxSigma do
        begin
        y:=MinY;
        b:=sty+Size-1;

        while y<=MaxY do
                begin
                TheModel.SetSigma(sig);
                if TheModel.IsInvasion(defaultX,y) then
                        begin
                        if TheModel.WasSpecial<>0 then
                                pip.Canvas.Pixels[a,b]:=clTable[TheModel.WasSpecial]
                                else
                                pip.Canvas.Pixels[a,b]:=clBlack
                        end
                        else
                        begin
                        if TheModel.WasSpecial<>0 then
                                pip.Canvas.Pixels[a,b]:=clTable[TheModel.WasSpecial]
                                else
                                pip.Canvas.Pixels[a,b]:=clYellow;
                        end;
                dec(b);
                y:=y+ystep;
                end;
        MyProgressBar.Position:=round( (100*(a-stx))/size );
        inc(a);
        sig:=sig+sstep;
        if a mod RefreshRate = 0 then begin Application.ProcessMessages; end;
        end;
end;

procedure TForm1.PrintYvROnPip(var TheModel:AnyModel;stx,sty,size:integer);
var     ystep,y:double;
        rstep,r:double;
        a,b:integer;
const   title= 'R versus Y plot' ;
begin
a:=1;b:=1;   BorderedTextOut(pip.Canvas,a,b,3,3,title);
a:=a+2;b:=1; BorderedTextOut(pip.Canvas,a,b,3,3,TheModel.title);
pip.Canvas.Pen.Color:=clMaroon;
DrawGraphConstrains(pip.Canvas,stx-1,sty+size+1,-20,double2str(MinY,FlpLenght,FlpPrec),double2str(MinRate,FlpLenght,FlpPrec)); {0,0}
DrawGraphConstrains(pip.Canvas,stx+size+1,sty-1,20,double2str(MaxY,FlpLenght,FlpPrec),double2str(MaxRate,FlpLenght,FlpPrec));  {Max,Max}
pip.Canvas.Pen.Color:=clBlack;

ystep:=abs(MaxY-MinY)/(Size);
rstep:=abs(MaxRate-MinRate)/(Size);
r:=MinRate;
a:=stx;
while r<=MaxRate do
        begin
        y:=MinY;
        b:=sty+Size-1;

        while y<=MaxY do
                begin
                TheModel.SetR(r);
                if TheModel.IsInvasion(defaultX,y) then
                        begin
                        if TheModel.WasSpecial<>0 then
                                pip.Canvas.Pixels[a,b]:=clTable[TheModel.WasSpecial]
                                else
                                pip.Canvas.Pixels[a,b]:=clBlack
                        end
                        else
                        begin
                        if TheModel.WasSpecial<>0 then
                                pip.Canvas.Pixels[a,b]:=clTable[TheModel.WasSpecial]
                                else
                                pip.Canvas.Pixels[a,b]:=clYellow;
                        end;
                dec(b);
                y:=y+ystep;
                end;
        MyProgressBar.Position:=round( (100*(a-stx))/size );
        inc(a);
        r:=r+rstep;
        if a mod RefreshRate = 0 then begin Application.ProcessMessages; end;
        end;
end;

procedure TForm1.PrintYvFluctOnPip(var TheModel:AnyModel;stx,sty,size:integer);
var     ystep,y:double;
        fstep,flu:double;
        a,b:integer;
const   title= 'Fluctuation versus Y plot' ;
begin
a:=1;b:=1;   BorderedTextOut(pip.Canvas,a,b,3,3,title);
a:=a+2;b:=1; BorderedTextOut(pip.Canvas,a,b,3,3,TheModel.title);
pip.Canvas.Pen.Color:=clMaroon;
DrawGraphConstrains(pip.Canvas,stx-1,sty+size+1,-20,double2str(MinY,FlpLenght,FlpPrec),double2str(MinFluct,FlpLenght,FlpPrec)); {0,0}
DrawGraphConstrains(pip.Canvas,stx+size+1,sty-1,20,double2str(MaxY,FlpLenght,FlpPrec),double2str(MaxFluct,FlpLenght,FlpPrec));  {Max,Max}
pip.Canvas.Pen.Color:=clBlack;

fstep:=abs(MaxFluct-MinFluct)/(Size);
ystep:=abs(MaxY-MinY)/(Size);
flu:=MinFluct;
a:=stx;
while flu<=MaxFluct do
        begin
        y:=MinY;
        b:=sty+Size-1;

        while y<=MaxY do
                begin
                TheModel.SetFluct(flu);
                if TheModel.IsInvasion(defaultX,y) then
                        begin
                        if TheModel.WasSpecial<>0 then
                                pip.Canvas.Pixels[a,b]:=clTable[TheModel.WasSpecial]
                                else
                                pip.Canvas.Pixels[a,b]:=clBlack
                        end
                        else
                        begin
                        if TheModel.WasSpecial<>0 then
                                pip.Canvas.Pixels[a,b]:=clTable[TheModel.WasSpecial]
                                else
                                pip.Canvas.Pixels[a,b]:=clYellow;
                        end;
                dec(b);
                y:=y+ystep;
                end;
        MyProgressBar.Position:=round( (100*(a-stx))/size );
        inc(a);
        flu:=flu+fstep;
        if a mod RefreshRate = 0 then begin Application.ProcessMessages; end;
        end;
end;

procedure TForm1.PrintBranchingOnPip(var TheModel:AnyModel;stx,sty,Size:integer);
var     xstep,ystep,x,y:double;
        a,b,val:integer;
const   title= 'Fluctuation versus Sigma plot' ;
begin
a:=1;b:=1;   BorderedTextOut(pip.Canvas,a,b,3,3,title);
a:=a+2;b:=1; BorderedTextOut(pip.Canvas,a,b,3,3,TheModel.title);
pip.Canvas.Pen.Color:=clMaroon;
DrawGraphConstrains(pip.Canvas,stx-1,sty+size+1,-20,double2str(MinSigma,FlpLenght,FlpPrec),double2str(MinFluct,FlpLenght,FlpPrec)); {0,0}
DrawGraphConstrains(pip.Canvas,stx+size+1,sty-1,20,double2str(MaxSigma,FlpLenght,FlpPrec),double2str(MaxFluct,FlpLenght,FlpPrec));  {Max,Max}
pip.Canvas.Pen.Color:=clBlack;

xstep:=abs(MaxFluct-MinFluct)/(Size);
ystep:=abs(MaxSigma-MinSigma)/(Size);
x:=MinFluct;
a:=stx;
while x<=MaxFluct do
        begin
        y:=MinSigma;
        b:=sty+Size-1;

        while y<=MaxSigma do
                begin
                val:=TheModel.IsESSorBranching(y,x);
                pip.Canvas.Pixels[a,b]:=clTable[val];

                dec(b);
                y:=y+ystep;
                end;
        MyProgressBar.Position:=round( (100*(a-stx))/size );
        inc(a);
        x:=x+xstep;

        if a mod RefreshRate = 0 then begin Application.ProcessMessages; end;
        end;
end;

procedure TForm1.FittBranchingOnPip(stx,sty,size:integer);
var kstep,xstep,sstep,k,y,x,s_y,s_x:double;
    a,b,c:integer;
const   title= 'Analitical ESS/branching border for the model #3' ;
begin
a:=pip.ClientWidth-pip.Canvas.TextWidth(title)-12;
b:=1;
BorderedTextOut(pip.Canvas,a,b,3,3,title);
DrawGraphConstrains(pip.Canvas,stx,sty+size,-20,double2str(MinSigma,FlpLenght,FlpPrec),double2str(MinFluct,FlpLenght,FlpPrec)); {0,0}
DrawGraphConstrains(pip.Canvas,stx+size,sty,20,double2str(MaxSigma,FlpLenght,FlpPrec),double2str(MaxFluct,FlpLenght,FlpPrec));  {Max,Max}

kstep:=1.0/(Size);
xstep:=abs(MaxFluct-MinFluct)/(Size);
sstep:=abs(MaxSigma-MinSigma)/(Size);
k:=0;
a:=stx;c:=0;
while k<=1 do
        begin
        y:=TheModel3.TransitionValue(k);
        x:=k*y;
{        if TheModel3.WasSpecial<>0 then
                begin
                                   }
        s_y:=(y-MinSigma)/(MaxSigma-MinSigma);
        s_x:=(x-MinFluct)/(MaxFluct-MinFluct);

        if (s_y<=MaxSigma) and (s_y>=MinSigma) and
         (s_x<=MaxFluct) and (s_x>=MinFluct) then
                begin
                a:=stx+round(Size*s_x);
                b:=sty+Size-round(Size*s_y);
                pip.Canvas.Pixels[a,b]:=clAqua;
                end
                else
                begin
                kstep:=1.0/(Size);
                end;

        MyProgressBar.Position:=round( (c)/size *100 );
        k:=k+kstep;
        inc(c);
        if c mod RefreshRate = 0 then begin Application.ProcessMessages; end;
        end;
end;

procedure TForm1.ButtonBranchFittClick(Sender: TObject);
begin
if CheckBoxClean.Checked=True then
        pip.Canvas.FillRect(pip.Canvas.ClipRect);
MyProgressBar.Position:=0;
TheModel3.init(Rate,Sigma,StartingConcentration,FluctiationRange);
FittBranchingOnPip(300-pipSize div 2,300-pipSize div 2,pipSize);
MyProgressBar.Position:=0;
end;

procedure TForm1.ButtonESSClick(Sender: TObject);
begin
if CheckBoxClean.Checked=True then
        pip.Canvas.FillRect(pip.Canvas.ClipRect);
MyProgressBar.Position:=0;
case ModelIndex of
1:begin TheModel1.init(Rate,Sigma);
        CurrentModel:=@TheModel1;
        end;
2:begin TheModel2.init(Rate,Sigma,StartingConcentration);
        CurrentModel:=@TheModel2;
        end;
3:begin TheModel3.init(Rate,Sigma,StartingConcentration,FluctiationRange);
        CurrentModel:=@TheModel3;
        end;
4:begin TheModel4.init(Rate,Sigma,StartingConcentration,MutantStartingConcentration,FluctiationRange);
        CurrentModel:=@TheModel4;
        end;
end {case};

PrintBranchingOnPip(CurrentModel^,300-pipSize div 2,300-pipSize div 2,pipSize);MyProgressBar.Position:=0;
end;

procedure TForm1.ButtonYvSigmaClick(Sender: TObject);
begin
if CheckBoxClean.Checked=True then
        pip.Canvas.FillRect(pip.Canvas.ClipRect);

case ModelIndex of
1:begin TheModel1.init(Rate,Sigma);
        CurrentModel:=@TheModel1;
        end;
2:begin TheModel2.init(Rate,Sigma,StartingConcentration);
        CurrentModel:=@TheModel2;
        end;
3:begin TheModel3.init(Rate,Sigma,StartingConcentration,FluctiationRange);
        CurrentModel:=@TheModel3;
        end;
4:begin TheModel4.init(Rate,Sigma,StartingConcentration,MutantStartingConcentration,FluctiationRange);
        CurrentModel:=@TheModel4;
        end;
end {case};

PrintYvSigmaOnPip(CurrentModel^,300-pipSize div 2,300-pipSize div 2,pipSize);MyProgressBar.Position:=0;
end;

procedure TForm1.ButtonYvRClick(Sender: TObject);
begin
 if CheckBoxClean.Checked=True then
        pip.Canvas.FillRect(pip.Canvas.ClipRect);

case ModelIndex of
1:begin TheModel1.init(Rate,Sigma);
        CurrentModel:=@TheModel1;
        end;
2:begin TheModel2.init(Rate,Sigma,StartingConcentration);
        CurrentModel:=@TheModel2;
        end;
3:begin TheModel3.init(Rate,Sigma,StartingConcentration,FluctiationRange);
        CurrentModel:=@TheModel3;
        end;
4:begin TheModel4.init(Rate,Sigma,StartingConcentration,MutantStartingConcentration,FluctiationRange);
        CurrentModel:=@TheModel4;
        end;
end {case};

PrintYvROnPip(CurrentModel^,300-pipSize div 2,300-pipSize div 2,pipSize);MyProgressBar.Position:=0;
end;

procedure TForm1.ButtonYvFluctClick(Sender: TObject);
begin
if CheckBoxClean.Checked=True then
        pip.Canvas.FillRect(pip.Canvas.ClipRect);

case ModelIndex of
1:begin TheModel1.init(Rate,Sigma);
        CurrentModel:=@TheModel1;
        end;
2:begin TheModel2.init(Rate,Sigma,StartingConcentration);
        CurrentModel:=@TheModel2;
        end;
3:begin TheModel3.init(Rate,Sigma,StartingConcentration,FluctiationRange);
        CurrentModel:=@TheModel3;
        end;
4:begin TheModel4.init(Rate,Sigma,StartingConcentration,MutantStartingConcentration,FluctiationRange);
        CurrentModel:=@TheModel4;
        end;
end {case};

PrintYvFluctOnPip(CurrentModel^,300-pipSize div 2,300-pipSize div 2,pipSize);MyProgressBar.Position:=0;
end;


procedure TForm1.OKClick(Sender: TObject);
var
        MyName:string[255];
begin
if CheckBoxClean.Checked=True then
        pip.Canvas.FillRect(pip.Canvas.ClipRect);

case ModelIndex of
1:begin TheModel1.init(Rate,Sigma);
        CurrentModel:=@TheModel1;
        end;
2:begin TheModel2.init(Rate,Sigma,StartingConcentration);
        CurrentModel:=@TheModel2;
        end;
3:begin TheModel3.init(Rate,Sigma,StartingConcentration,FluctiationRange);
        CurrentModel:=@TheModel3;
        end;
4:begin TheModel4.init(Rate,Sigma,StartingConcentration,MutantStartingConcentration,FluctiationRange);
        CurrentModel:=@TheModel4;
        end;
end {case};

PrintOnPip(CurrentModel^,300-pipSize div 2,300-pipSize div 2,pipSize);MyProgressBar.Position:=0;
if  CheckBoxAutoSave.Checked then
        begin
        MyName:=Int2str(pipSize,3)+CurrentModel^.TentativeBmpFileName;
        pip.Picture.SaveToFile(MyName);
        end;
end;

procedure TForm1.EditForRateChange(Sender: TObject);
var     R:double;
        c:integer;
begin
ChangeDoubleFromEditBox(Rate,EditForRate,MinRate,MaxRate);
end;

procedure TForm1.EditFluctuationChange(Sender: TObject);
var     R:double;
        c:integer;
begin
ChangeDoubleFromEditBox(FluctiationRange,EditFluctuation,MinFluct,MaxFluct);
end;

procedure TForm1.EditSigmaChange(Sender: TObject);
begin
ChangeDoubleFromEditBox(Sigma,EditSigma,MinSigma,MaxSigma);
end;

procedure TForm1.EditConcentrationChange(Sender: TObject);
begin
ChangeDoubleFromEditBox(StartingConcentration,EditConcentration,MaxStartingConcentration,MaxStartingConcentration);
end;

procedure TForm1.EditMutConcentrationChange(Sender: TObject);
begin
ChangeDoubleFromEditBox(MutantStartingConcentration,EditMutConcentration,MinMutStartingConcentration,MaxMutStartingConcentration);
end;

procedure TForm1.EditXdefChange(Sender: TObject);
begin
ChangeDoubleFromEditBox(defaultX,EditXdef,MinX,MaxX);
end;

procedure TForm1.EditYdefChange(Sender: TObject);
begin
ChangeDoubleFromEditBox(defaultY,EditYdef,MinY,MaxY);
end;


procedure TForm1.EditPipSizeChange(Sender: TObject);
var     R:integer;
        c:integer;
begin
Val(EditPipSize.Text,R,c);
if c<>0 then
        begin
        EditPipSize.Color:=clRed;
        end
        else
        begin
        if (R>10) and (R<=500) then
                        begin
                        PipSize:=R;
                        EditPipSize.Color:=clWhite;
                        end
                        else
                        EditPipSize.Color:=clYellow;
        end;
end;


procedure TForm1.EditModelIndexChange(Sender: TObject);
var     R:integer;
        c:integer;
begin
Val(EditModelIndex.Text,R,c);
if c<>0 then
        begin
        EditModelIndex.Color:=clRed;
        end
        else
        begin
        if (R>0) and (R<=4) then
                        begin
                        ModelIndex:=R;
                        EditModelIndex.Color:=clWhite;
                        end
                        else
                        EditModelIndex.Color:=clYellow;
        end;
{Addapt the interface }
case  ModelIndex of
1:begin
        EditIterations.Enabled:=false;
        EditFluctuation.Enabled:=false;
        end;
2:begin
        EditIterations.Enabled:=false;
        EditFluctuation.Enabled:=false;
        end;
3:begin
        EditIterations.Enabled:=true;
        EditIterations.Text:=Int2str(FITNESS_ITER,0);
        EditFluctuation.Enabled:=true;
        end;
4:begin
        EditIterations.Enabled:=true;
        EditIterations.Text:=Int2str(RATIO_ITER,0);
        EditFluctuation.Enabled:=true;
        end;
end{case};

ComboBoxModel.ItemIndex:=ModelIndex-1;
end;

procedure TForm1.EditIterationsChange(Sender: TObject);
var     R:integer;
        c:integer;
begin
Val(EditIterations.Text,R,c);
if c<>0 then
        begin
        EditIterations.Color:=clRed;
        end
        else
        begin
        if (R>200) and (R<=20000) then
                        begin
                        case ModelIndex of
                        3:FITNESS_ITER:=R;
                        4:RATIO_ITER:=R;
                        end;
                        EditIterations.Color:=clWhite;
                        end
                        else
                        EditIterations.Color:=clYellow;
        end;
end;

procedure TForm1.ComboBoxModelChange(Sender: TObject);
var MyStr:string;
begin
ModelIndex:=ComboBoxModel.ItemIndex+1;
Str(ModelIndex,MyStr);
EditModelIndex.Text:=MyStr;
end;

procedure TForm1.SpinEditRefRateChange(Sender: TObject);
begin
RefreshRate:=SpinEditRefRate.Value;
if RefreshRate=0 then RefreshRate:=1000;
end;

begin
TheModel1.startbis;
TheModel2.startbis;
TheModel3.startbis;
TheModel4.startbis;




end.
